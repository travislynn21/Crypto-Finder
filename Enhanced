import requests
import pandas as pd
import numpy as np

def fetch_crypto_data():
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        'vs_currency': 'usd',
        'order': 'market_cap_desc',
        'per_page': 10,
        'page': 1,
        'sparkline': 'false'
    }
    response = requests.get(url, params=params)
    data = response.json()
    return data

def calculate_sma(prices, window):
    return prices.rolling(window=window).mean()

def analyze_data(data):
    df = pd.DataFrame(data)
    df['price_change_percentage_24h'] = df['price_change_percentage_24h'].astype(float)
    df['market_cap'] = df['market_cap'].astype(float)
    df['total_volume'] = df['total_volume'].astype(float)

    # Calculate Simple Moving Average (SMA)
    df['sma_7'] = calculate_sma(df['current_price'], 7)
    df['sma_30'] = calculate_sma(df['current_price'], 30)

    # Filter criteria: highest 24h change, high market cap, high volume, and price above SMA
    filtered_df = df[(df['price_change_percentage_24h'] > 0) &
                     (df['market_cap'] > df['market_cap'].mean()) &
                     (df['total_volume'] > df['total_volume'].mean()) &
                     (df['current_price'] > df['sma_7'])]

    if not filtered_df.empty:
        best_crypto = filtered_df.loc[filtered_df['price_change_percentage_24h'].idxmax()]
    else:
        best_crypto = df.loc[df['price_change_percentage_24h'].idxmax()]

    return best_crypto

def main():
    data = fetch_crypto_data()
    best_crypto = analyze_data(data)
    print("Best cryptocurrency to buy based on enhanced criteria:")
    print(f"Name: {best_crypto['name']}")
    print(f"Symbol: {best_crypto['symbol']}")
    print(f"Current Price: ${best_crypto['current_price']}")
    print(f"24h Change: {best_crypto['price_change_percentage_24h']}%")
    print(f"Market Cap: ${best_crypto['market_cap']}")
    print(f"Volume: ${best_crypto['total_volume']}")
    print(f"SMA 7: ${best_crypto['sma_7']}")
    print(f"SMA 30: ${best_crypto['sma_30']}")

if __name__ == "__main__":
    main()
